{"ast":null,"code":"// constants\nvar HTML = 'html';\nvar HEAD = 'head';\nvar BODY = 'body';\nvar FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\n// match-all-characters in case of newlines (DOTALL)\n\nvar HEAD_TAG_REGEX = /<head[^]*>/i;\nvar BODY_TAG_REGEX = /<body[^]*>/i; // falls back to `parseFromString` if `createHTMLDocument` cannot be used\n\nvar parseFromDocument = function () {\n  throw new Error('This browser does not support `document.implementation.createHTMLDocument`');\n};\n\nvar parseFromString = function () {\n  throw new Error('This browser does not support `DOMParser.prototype.parseFromString`');\n};\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\n\n\nif (typeof window.DOMParser === 'function') {\n  var domParser = new window.DOMParser();\n  var mimeType = 'text/html';\n  /**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n\n  parseFromString = function (html, tagName) {\n    if (tagName) {\n      html = '<' + tagName + '>' + html + '</' + tagName + '>';\n    }\n\n    return domParser.parseFromString(html, mimeType);\n  };\n\n  parseFromDocument = parseFromString;\n}\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\n\n\nif (document.implementation) {\n  var doc = document.implementation.createHTMLDocument();\n  /**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n\n  parseFromDocument = function (html, tagName) {\n    if (tagName) {\n      var element = doc.documentElement.querySelector(tagName);\n      element.innerHTML = html;\n      return doc;\n    }\n\n    doc.documentElement.innerHTML = html;\n    return doc;\n  };\n}\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\n\n\nvar template = document.createElement('template');\nvar parseFromTemplate;\n\nif (template.content) {\n  /**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param  {string} html - The HTML string.\n   * @return {NodeList}\n   */\n  parseFromTemplate = function (html) {\n    template.innerHTML = html;\n    return template.content.childNodes;\n  };\n}\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param  {string}   html - HTML markup.\n * @return {NodeList}\n */\n\n\nfunction domparser(html) {\n  var firstTagName;\n  var match = html.match(FIRST_TAG_REGEX);\n\n  if (match && match[1]) {\n    firstTagName = match[1].toLowerCase();\n  }\n\n  var doc;\n  var element;\n  var elements;\n\n  switch (firstTagName) {\n    case HTML:\n      doc = parseFromString(html); // the created document may come with filler head/body elements,\n      // so make sure to remove them if they don't actually exist\n\n      if (!HEAD_TAG_REGEX.test(html)) {\n        element = doc.querySelector(HEAD);\n\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      if (!BODY_TAG_REGEX.test(html)) {\n        element = doc.querySelector(BODY);\n\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      return doc.querySelectorAll(HTML);\n\n    case HEAD:\n    case BODY:\n      doc = parseFromDocument(html);\n      elements = doc.querySelectorAll(firstTagName); // if there's a sibling element, then return both elements\n\n      if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n        return elements[0].parentNode.childNodes;\n      }\n\n      return elements;\n    // low-level tag or text\n\n    default:\n      if (parseFromTemplate) {\n        return parseFromTemplate(html);\n      }\n\n      element = parseFromDocument(html, BODY).querySelector(BODY);\n      return element.childNodes;\n  }\n}\n\nmodule.exports = domparser;","map":{"version":3,"sources":["E:/KTCity/react-course-project/react-monkey-blogging/node_modules/html-dom-parser/lib/client/domparser.js"],"names":["HTML","HEAD","BODY","FIRST_TAG_REGEX","HEAD_TAG_REGEX","BODY_TAG_REGEX","parseFromDocument","Error","parseFromString","window","DOMParser","domParser","mimeType","html","tagName","document","implementation","doc","createHTMLDocument","element","documentElement","querySelector","innerHTML","template","createElement","parseFromTemplate","content","childNodes","domparser","firstTagName","match","toLowerCase","elements","test","parentNode","removeChild","querySelectorAll","module","exports"],"mappings":"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","sourcesContent":["// constants\nvar HTML = 'html';\nvar HEAD = 'head';\nvar BODY = 'body';\nvar FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\n// match-all-characters in case of newlines (DOTALL)\nvar HEAD_TAG_REGEX = /<head[^]*>/i;\nvar BODY_TAG_REGEX = /<body[^]*>/i;\n\n// falls back to `parseFromString` if `createHTMLDocument` cannot be used\nvar parseFromDocument = function () {\n  throw new Error(\n    'This browser does not support `document.implementation.createHTMLDocument`'\n  );\n};\n\nvar parseFromString = function () {\n  throw new Error(\n    'This browser does not support `DOMParser.prototype.parseFromString`'\n  );\n};\n\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\nif (typeof window.DOMParser === 'function') {\n  var domParser = new window.DOMParser();\n  var mimeType = 'text/html';\n\n  /**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromString = function (html, tagName) {\n    if (tagName) {\n      html = '<' + tagName + '>' + html + '</' + tagName + '>';\n    }\n\n    return domParser.parseFromString(html, mimeType);\n  };\n\n  parseFromDocument = parseFromString;\n}\n\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\nif (document.implementation) {\n  var doc = document.implementation.createHTMLDocument();\n\n  /**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromDocument = function (html, tagName) {\n    if (tagName) {\n      var element = doc.documentElement.querySelector(tagName);\n      element.innerHTML = html;\n      return doc;\n    }\n\n    doc.documentElement.innerHTML = html;\n    return doc;\n  };\n}\n\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\nvar template = document.createElement('template');\nvar parseFromTemplate;\n\nif (template.content) {\n  /**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param  {string} html - The HTML string.\n   * @return {NodeList}\n   */\n  parseFromTemplate = function (html) {\n    template.innerHTML = html;\n    return template.content.childNodes;\n  };\n}\n\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param  {string}   html - HTML markup.\n * @return {NodeList}\n */\nfunction domparser(html) {\n  var firstTagName;\n  var match = html.match(FIRST_TAG_REGEX);\n\n  if (match && match[1]) {\n    firstTagName = match[1].toLowerCase();\n  }\n\n  var doc;\n  var element;\n  var elements;\n\n  switch (firstTagName) {\n    case HTML:\n      doc = parseFromString(html);\n\n      // the created document may come with filler head/body elements,\n      // so make sure to remove them if they don't actually exist\n      if (!HEAD_TAG_REGEX.test(html)) {\n        element = doc.querySelector(HEAD);\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      if (!BODY_TAG_REGEX.test(html)) {\n        element = doc.querySelector(BODY);\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      return doc.querySelectorAll(HTML);\n\n    case HEAD:\n    case BODY:\n      doc = parseFromDocument(html);\n      elements = doc.querySelectorAll(firstTagName);\n\n      // if there's a sibling element, then return both elements\n      if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n        return elements[0].parentNode.childNodes;\n      }\n      return elements;\n\n    // low-level tag or text\n    default:\n      if (parseFromTemplate) {\n        return parseFromTemplate(html);\n      }\n      element = parseFromDocument(html, BODY).querySelector(BODY);\n      return element.childNodes;\n  }\n}\n\nmodule.exports = domparser;\n"]},"metadata":{},"sourceType":"script"}